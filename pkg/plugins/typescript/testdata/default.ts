// Generated by graphql-go-gen - TypeScript Plugin
// DO NOT EDIT THIS FILE MANUALLY

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  Date: { input: string; output: string };
  JSON: { input: Record<string, any>; output: Record<string, any> };
};

export enum Status {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
  PENDING = 'PENDING',
}

export enum UserRole {
  ADMIN = 'ADMIN',
  USER = 'USER',
  GUEST = 'GUEST',
}

export type CreateUserInput = {
  name: Scalars['String']['input'];
  email: Scalars['String']['input'];
  age?: InputMaybe<Scalars['Int']['input']>;
  role: UserRole;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
};

export type UpdateUserInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  age?: InputMaybe<Scalars['Int']['input']>;
  role?: InputMaybe<UserRole>;
  status?: InputMaybe<Status>;
};

export type Comment = {
  __typename?: 'Comment';
  id: Scalars['ID']['output'];
  content: Scalars['String']['output'];
  author: User;
  post: Post;
  createdAt: Scalars['Date']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser: User;
  updateUser?: Maybe<User>;
  deleteUser: Scalars['Boolean']['output'];
  createPost: Post;
  publishPost?: Maybe<Post>;
  deletePost: Scalars['Boolean']['output'];
  addComment: Comment;
  deleteComment: Scalars['Boolean']['output'];
};

export type MutationCreateUserArgs = {
  input: CreateUserInput;
};

export type MutationUpdateUserArgs = {
  id: Scalars['ID']['input'];
  input: UpdateUserInput;
};

export type MutationDeleteUserArgs = {
  id: Scalars['ID']['input'];
};

export type MutationCreatePostArgs = {
  title: Scalars['String']['input'];
  content: Scalars['String']['input'];
  authorId: Scalars['ID']['input'];
};

export type MutationPublishPostArgs = {
  id: Scalars['ID']['input'];
};

export type MutationDeletePostArgs = {
  id: Scalars['ID']['input'];
};

export type MutationAddCommentArgs = {
  postId: Scalars['ID']['input'];
  content: Scalars['String']['input'];
};

export type MutationDeleteCommentArgs = {
  id: Scalars['ID']['input'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasNextPage: Scalars['Boolean']['output'];
  hasPreviousPage: Scalars['Boolean']['output'];
  startCursor?: Maybe<Scalars['String']['output']>;
  endCursor?: Maybe<Scalars['String']['output']>;
};

export type Post = {
  __typename?: 'Post';
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  content: Scalars['String']['output'];
  published: Scalars['Boolean']['output'];
  author: User;
  comments: Array<Comment>;
  tags: Array<Scalars['String']['output']>;
  createdAt: Scalars['Date']['output'];
  publishedAt?: Maybe<Scalars['Date']['output']>;
};

export type Profile = {
  __typename?: 'Profile';
  id: Scalars['ID']['output'];
  bio?: Maybe<Scalars['String']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
  user: User;
};

export type Query = {
  __typename?: 'Query';
  user?: Maybe<User>;
  users: UserConnection;
  currentUser?: Maybe<User>;
  post?: Maybe<Post>;
  posts: Array<Post>;
  search: Array<SearchResult>;
  node?: Maybe<Node>;
};

export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};

export type QueryUsersArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
};

export type QueryPostArgs = {
  id: Scalars['ID']['input'];
};

export type QueryPostsArgs = {
  published?: InputMaybe<Scalars['Boolean']['input']>;
};

export type QuerySearchArgs = {
  query: Scalars['String']['input'];
  limit?: InputMaybe<Scalars['Int']['input']>;
};

export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};

export type Query__typeArgs = {
  name: Scalars['String']['input'];
};

export type Subscription = {
  __typename?: 'Subscription';
  userCreated: User;
  postPublished: Post;
  commentAdded: Comment;
};

export type SubscriptionCommentAddedArgs = {
  postId: Scalars['ID']['input'];
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  email: Scalars['String']['output'];
  age?: Maybe<Scalars['Int']['output']>;
  role: UserRole;
  status: Status;
  posts: Array<Post>;
  profile?: Maybe<Profile>;
  createdAt: Scalars['Date']['output'];
  updatedAt: Scalars['Date']['output'];
};

export type UserConnection = {
  __typename?: 'UserConnection';
  edges: Array<UserEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

export type UserEdge = {
  __typename?: 'UserEdge';
  node: User;
  cursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
  createdAt: Scalars['Date']['output'];
};

export type SearchResult = User | Post | Comment;

