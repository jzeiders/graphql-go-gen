// Generated by graphql-go-gen
// DO NOT EDIT THIS FILE MANUALLY

import { TypedDocumentNode } from '@graphql-typed-document-node/core';
import { print } from 'graphql';
import gql from 'graphql-tag';

import type {
  CreatePostResult,
  CreatePostVariables,
  CreateUserResult,
  CreateUserVariables,
  GetUserResult,
  GetUserVariables,
  ListUsersResult,
  ListUsersVariables,
} from './types';

// Fragment definitions
export const PostFieldsFragment = gql`
  fragment PostFields on Post {
    # Fragment fields would go here
    __typename
  }
`;

export const UserFieldsFragment = gql`
  fragment UserFields on User {
    # Fragment fields would go here
    __typename
  }
`;


// Operation definitions
const CreatePostDocument = gql`
  mutation CreatePost($input: CreatePostInput!) {
    createPost(input: $input) {
      id
      title
      content
      status
      author {
        id
        username
      }
      tags
      createdAt
    }
  }
`;

export const CreatePost: TypedDocumentNode<CreatePostResult, CreatePostVariables> = CreatePostDocument;

const CreateUserDocument = gql`
  mutation CreateUser($input: CreateUserInput!) {
    createUser(input: $input) {
      id
      username
      email
      profile {
        bio
      }
    }
  }
`;

export const CreateUser: TypedDocumentNode<CreateUserResult, CreateUserVariables> = CreateUserDocument;

const GetUserDocument = gql`
  query GetUser($id: ID!) {
    user(id: $id) {
      id
      username
      email
      profile {
        bio
        avatarUrl
        location
      }
      posts {
        id
        title
        status
      }
    }
  }
`;

export const GetUser: TypedDocumentNode<GetUserResult, GetUserVariables> = GetUserDocument;

const ListUsersDocument = gql`
  query ListUsers($limit: Int, $offset: Int) {
    users(limit: $limit, offset: $offset) {
      id
      username
      email
      createdAt
    }
  }
`;

export const ListUsers: TypedDocumentNode<ListUsersResult, ListUsersVariables> = ListUsersDocument;

